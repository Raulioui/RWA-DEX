{
  "transactions": [
    {
      "hash": "0x4b33367dfcfbead9f00c04536a850b705d37ab502f9a4e1135f7cac69e7cfa89",
      "transactionType": "CALL",
      "contractName": null,
      "contractAddress": "0x2a5e9b2033500c51e604e0dc3cbe5801a735eede",
      "function": "setJsSources(string,string)",
      "arguments": [
        "if (\\n  secrets.alpacaBrokerKey == \\\"\\\" ||\\n  secrets.alpacaBrokerSecret === \\\"\\\"\\n) {\\n  throw Error(\\n    \\\"need alpaca keys\\\"\\n  )\\n}\\n\\nasync function main() {\\n\\n  const asset = args[0]\\n  const usdAmount = args[1]\\n  const account_id = args[2]\\n\\n  const amount = await buyAsset()\\n\\n  return Functions.encodeUint256(amount)\\n\\n  async function buyAsset() {\\n\\n    const getAssetPrice = Functions.makeHttpRequest({\\n      method: \\'GET\\',\\n      url: `https://data.alpaca.markets/v2/stocks/bars/latest?symbols=${asset}`,\\n      headers: {\\n        accept: \\'application/json\\',\\n        \\'APCA-API-KEY-ID\\': \\'AK8Y4TWWDJVERKIBS7F8\\',\\n        \\'APCA-API-SECRET-KEY\\': \\'v4HMsmcK3639PiP1suBC6nCYeTFZHF6dk77gdfZM\\'\\n      }\\n    })\\n\\n    const res = await getAssetPrice;\\n\\n    const assetPriceUsd = res.data.bars[asset].c;\\n  \\n    // Primero, pasar usdAmount a float si no lo es\\n    const usdAmountFloat = parseFloat(usdAmount / 1e18); // Ej: 100 dólares\\n  \\n    // assetsToBuy = usdAmount / precio de la acción\\n    const assetsToBuy = usdAmountFloat / assetPriceUsd;\\n\\n    const alpacaRequestBuyAsset = Functions.makeHttpRequest({\\n      method: \\'POST\\',\\n      url: `https://broker-api.sandbox.alpaca.markets/v1/trading/accounts/${account_id}/orders`,\\n      headers: {\\n        accept: \\'application/json\\', \\n        \\'content-type\\': \\'application/json\\',\\n        authorization: \\'Basic \\' + btoa(`CKFCQ4JE4UJU4F2CKT37:GcbMMXbaJYd6Ya7zTRZRkubvW1GC274302rZKkJr`)\\n      },\\n      data: {\\n        side: \\'buy\\',\\n        type: \\'market\\',\\n        time_in_force: \\'day\\',\\n        commission_type: \\'notional\\',\\n        symbol: asset,\\n        qty: assetsToBuy.toFixed(2), // Redondear a 2 decimales\\n      }\\n    })\\n  \\n    const response = await alpacaRequestBuyAsset\\n    console.log(response)\\n\\n    if(response.status !== 200) {\\n      return 0\\n    } else {\\n      return assetsToBuy * 1e18\\n    }    \\n  }\\n}\\n\\nconst result = await main()\\nreturn result",
        "if (\\n  secrets.alpacaBrokerKey == \\\"\\\" ||\\n  secrets.alpacaBrokerSecret === \\\"\\\"\\n) {\\n  throw Error(\\n    \\\"need alpaca keys\\\"\\n  )\\n}\\n\\nasync function main() {\\n\\n  const asset = args[0]\\n  const account_id = args[1]\\n  const assetAmount = args[2]\\n\\n  const amount = await sellAsset()\\n\\n  return Functions.encodeUint256(amount)\\n\\n  async function sellAsset() {\\n\\n    const assetAmountInEth = Number(assetAmount) / 1e18;\\n\\n    const getAssetPrice = Functions.makeHttpRequest({\\n      method: \\'GET\\',\\n      url: `https://data.alpaca.markets/v2/stocks/bars/latest?symbols=${asset}`,\\n      headers: {\\n        accept: \\'application/json\\',\\n        \\'APCA-API-KEY-ID\\': \\'AK8Y4TWWDJVERKIBS7F8\\',\\n        \\'APCA-API-SECRET-KEY\\': \\'v4HMsmcK3639PiP1suBC6nCYeTFZHF6dk77gdfZM\\'\\n      }\\n    })\\n\\n    const res = await getAssetPrice;\\n\\n    const assetPriceUsd = res.data.bars[asset].c;\\n  \\n    const usdAmountToMint = assetAmountInEth * assetPriceUsd\\n\\n    const alpacaRequestBuyAsset = Functions.makeHttpRequest({\\n      method: \\'POST\\',\\n      url: `https://broker-api.sandbox.alpaca.markets/v1/trading/accounts/${account_id}/orders`,\\n      headers: {\\n        accept: \\'application/json\\', \\n        \\'content-type\\': \\'application/json\\',\\n        authorization: \\'Basic \\' + btoa(`CKFCQ4JE4UJU4F2CKT37:GcbMMXbaJYd6Ya7zTRZRkubvW1GC274302rZKkJr`)\\n      },\\n      data: {\\n        side: \\'sell\\',\\n        type: \\'market\\',\\n        time_in_force: \\'day\\',\\n        commission_type: \\'notional\\',\\n        symbol: asset,\\n        qty: assetAmountInEth.toString() // Redondear a 2 decimales\\n      }\\n    })\\n  \\n    const response = await alpacaRequestBuyAsset\\n    console.log(response)\\n\\n    if(response.status !== 200) {\\n      return 0\\n    } else {\\n      return usdAmountToMint * 1e18\\n    }    \\n  }\\n}\\n\\nconst result = await main()\\nreturn result"
      ],
      "transaction": {
        "from": "0x13ffba08c4c6636062c4fd812a97a67eafc2fe2b",
        "to": "0x2a5e9b2033500c51e604e0dc3cbe5801a735eede",
        "gas": "0x359c7f",
        "value": "0x0",
        "input": "0x192b5c74000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000007c00000000000000000000000000000000000000000000000000000000000000753696620280a2020736563726574732e616c7061636142726f6b65724b6579203d3d202222207c7c0a2020736563726574732e616c7061636142726f6b6572536563726574203d3d3d2022220a29207b0a20207468726f77204572726f72280a20202020226e65656420616c70616361206b657973220a2020290a7d0a0a6173796e632066756e6374696f6e206d61696e2829207b0a0a2020636f6e7374206173736574203d20617267735b305d0a2020636f6e737420757364416d6f756e74203d20617267735b315d0a2020636f6e7374206163636f756e745f6964203d20617267735b325d0a0a2020636f6e737420616d6f756e74203d20617761697420627579417373657428290a0a202072657475726e2046756e6374696f6e732e656e636f646555696e7432353628616d6f756e74290a0a20206173796e632066756e6374696f6e2062757941737365742829207b0a0a20202020636f6e73742067657441737365745072696365203d2046756e6374696f6e732e6d616b654874747052657175657374287b0a2020202020206d6574686f643a2027474554272c0a20202020202075726c3a206068747470733a2f2f646174612e616c706163612e6d61726b6574732f76322f73746f636b732f626172732f6c61746573743f73796d626f6c733d247b61737365747d602c0a202020202020686561646572733a207b0a20202020202020206163636570743a20276170706c69636174696f6e2f6a736f6e272c0a202020202020202027415043412d4150492d4b45592d4944273a2027414b385934545757444a5645524b494253374638272c0a202020202020202027415043412d4150492d5345435245542d4b4559273a20277634484d736d634b333633395069503173754243366e43596554465a484636646b37376764665a4d270a2020202020207d0a202020207d290a0a20202020636f6e737420726573203d20617761697420676574417373657450726963653b0a0a20202020636f6e73742061737365745072696365557364203d207265732e646174612e626172735b61737365745d2e633b0a20200a202020202f2f205072696d65726f2c20706173617220757364416d6f756e74206120666c6f6174207369206e6f206c6f2065730a20202020636f6e737420757364416d6f756e74466c6f6174203d207061727365466c6f617428757364416d6f756e74202f2031653138293b202f2f20456a3a203130302064c3b36c617265730a20200a202020202f2f20617373657473546f427579203d20757364416d6f756e74202f2070726563696f206465206c612061636369c3b36e0a20202020636f6e737420617373657473546f427579203d20757364416d6f756e74466c6f6174202f20617373657450726963655573643b0a0a20202020636f6e737420616c70616361526571756573744275794173736574203d2046756e6374696f6e732e6d616b654874747052657175657374287b0a2020202020206d6574686f643a2027504f5354272c0a20202020202075726c3a206068747470733a2f2f62726f6b65722d6170692e73616e64626f782e616c706163612e6d61726b6574732f76312f74726164696e672f6163636f756e74732f247b6163636f756e745f69647d2f6f7264657273602c0a202020202020686561646572733a207b0a20202020202020206163636570743a20276170706c69636174696f6e2f6a736f6e272c200a202020202020202027636f6e74656e742d74797065273a20276170706c69636174696f6e2f6a736f6e272c0a2020202020202020617574686f72697a6174696f6e3a202742617369632027202b2062746f612860434b464351344a4534554a55344632434b5433373a4763624d4d5862614a5964365961377a54525a526b75627657314743323734333032725a4b6b4a7260290a2020202020207d2c0a202020202020646174613a207b0a2020202020202020736964653a2027627579272c0a2020202020202020747970653a20276d61726b6574272c0a202020202020202074696d655f696e5f666f7263653a2027646179272c0a2020202020202020636f6d6d697373696f6e5f747970653a20276e6f74696f6e616c272c0a202020202020202073796d626f6c3a2061737365742c0a20202020202020207174793a20617373657473546f4275792e746f46697865642832292c202f2f205265646f6e646561722061203220646563696d616c65730a2020202020207d0a202020207d290a20200a20202020636f6e737420726573706f6e7365203d20617761697420616c706163615265717565737442757941737365740a20202020636f6e736f6c652e6c6f6728726573706f6e7365290a0a20202020696628726573706f6e73652e73746174757320213d3d2032303029207b0a20202020202072657475726e20300a202020207d20656c7365207b0a20202020202072657475726e20617373657473546f427579202a20316531380a202020207d202020200a20207d0a7d0a0a636f6e737420726573756c74203d206177616974206d61696e28290a72657475726e20726573756c740000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e5696620280a2020736563726574732e616c7061636142726f6b65724b6579203d3d202222207c7c0a2020736563726574732e616c7061636142726f6b6572536563726574203d3d3d2022220a29207b0a20207468726f77204572726f72280a20202020226e65656420616c70616361206b657973220a2020290a7d0a0a6173796e632066756e6374696f6e206d61696e2829207b0a0a2020636f6e7374206173736574203d20617267735b305d0a2020636f6e7374206163636f756e745f6964203d20617267735b315d0a2020636f6e7374206173736574416d6f756e74203d20617267735b325d0a0a2020636f6e737420616d6f756e74203d2061776169742073656c6c417373657428290a0a202072657475726e2046756e6374696f6e732e656e636f646555696e7432353628616d6f756e74290a0a20206173796e632066756e6374696f6e2073656c6c41737365742829207b0a0a20202020636f6e7374206173736574416d6f756e74496e457468203d204e756d626572286173736574416d6f756e7429202f20316531383b0a0a20202020636f6e73742067657441737365745072696365203d2046756e6374696f6e732e6d616b654874747052657175657374287b0a2020202020206d6574686f643a2027474554272c0a20202020202075726c3a206068747470733a2f2f646174612e616c706163612e6d61726b6574732f76322f73746f636b732f626172732f6c61746573743f73796d626f6c733d247b61737365747d602c0a202020202020686561646572733a207b0a20202020202020206163636570743a20276170706c69636174696f6e2f6a736f6e272c0a202020202020202027415043412d4150492d4b45592d4944273a2027414b385934545757444a5645524b494253374638272c0a202020202020202027415043412d4150492d5345435245542d4b4559273a20277634484d736d634b333633395069503173754243366e43596554465a484636646b37376764665a4d270a2020202020207d0a202020207d290a0a20202020636f6e737420726573203d20617761697420676574417373657450726963653b0a0a20202020636f6e73742061737365745072696365557364203d207265732e646174612e626172735b61737365745d2e633b0a20200a20202020636f6e737420757364416d6f756e74546f4d696e74203d206173736574416d6f756e74496e457468202a20617373657450726963655573640a0a20202020636f6e737420616c70616361526571756573744275794173736574203d2046756e6374696f6e732e6d616b654874747052657175657374287b0a2020202020206d6574686f643a2027504f5354272c0a20202020202075726c3a206068747470733a2f2f62726f6b65722d6170692e73616e64626f782e616c706163612e6d61726b6574732f76312f74726164696e672f6163636f756e74732f247b6163636f756e745f69647d2f6f7264657273602c0a202020202020686561646572733a207b0a20202020202020206163636570743a20276170706c69636174696f6e2f6a736f6e272c200a202020202020202027636f6e74656e742d74797065273a20276170706c69636174696f6e2f6a736f6e272c0a2020202020202020617574686f72697a6174696f6e3a202742617369632027202b2062746f612860434b464351344a4534554a55344632434b5433373a4763624d4d5862614a5964365961377a54525a526b75627657314743323734333032725a4b6b4a7260290a2020202020207d2c0a202020202020646174613a207b0a2020202020202020736964653a202773656c6c272c0a2020202020202020747970653a20276d61726b6574272c0a202020202020202074696d655f696e5f666f7263653a2027646179272c0a2020202020202020636f6d6d697373696f6e5f747970653a20276e6f74696f6e616c272c0a202020202020202073796d626f6c3a2061737365742c0a20202020202020207174793a206173736574416d6f756e74496e4574682e746f537472696e672829202f2f205265646f6e646561722061203220646563696d616c65730a2020202020207d0a202020207d290a20200a20202020636f6e737420726573706f6e7365203d20617761697420616c706163615265717565737442757941737365740a20202020636f6e736f6c652e6c6f6728726573706f6e7365290a0a20202020696628726573706f6e73652e73746174757320213d3d2032303029207b0a20202020202072657475726e20300a202020207d20656c7365207b0a20202020202072657475726e20757364416d6f756e74546f4d696e74202a20316531380a202020207d202020200a20207d0a7d0a0a636f6e737420726573756c74203d206177616974206d61696e28290a72657475726e20726573756c74000000000000000000000000000000000000000000000000000000",
        "nonce": "0x44a",
        "chainId": "0x66eee"
      },
      "additionalContracts": [],
      "isFixedGasLimit": false
    }
  ],
  "receipts": [
    {
      "status": "0x1",
      "cumulativeGasUsed": "0x2b5057",
      "logs": [],
      "logsBloom": "0x
      "type": "0x2",
      "transactionHash": "0x4b33367dfcfbead9f00c04536a850b705d37ab502f9a4e1135f7cac69e7cfa89",
      "transactionIndex": "0x5",
      "blockHash": "0x126e9e7e6ff100eb954c78256007c3545b2678702b6f85a8d96b44602e87873a",
      "blockNumber": "0x89371d2",
      "gasUsed": "0x28e5a7",
      "effectiveGasPrice": "0x5f5e100",
      "from": "0x13ffba08c4c6636062c4fd812a97a67eafc2fe2b",
      "to": "0x2a5e9b2033500c51e604e0dc3cbe5801a735eede",
      "contractAddress": null,
      "gasUsedForL1": "0x0",
      "l1BlockNumber": "0x7c3fa5",
      "timeboosted": false
    }
  ],
  "libraries": [],
  "pending": [],
  "returns": {},
  "timestamp": 1744964298,
  "chain": 421614,
  "commit": "6ac326c"
}